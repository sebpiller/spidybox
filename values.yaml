# Default values for spidybox.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This is for the secretes for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []
# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""


#This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/ 
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  enabled: true
  className: "traefik"
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: localhost

  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# This is to setup the liveness and readiness probes more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/configure-liveness-readiness-startup-probes/
livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

#This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# Additional volumes on the output Deployment definition.
volumes:
  - name: spidybox-configs-pv
    createPvc: spidybox-configs-pvc
    type: nfs
    server: 192.168.1.4
    path: /data/nfs/spidybox/configs/
    size: "50Gi"
  - name: spidybox-downloads-pv
    createPvc: spidybox-downloads-pvc
    type: nfs
    server: 192.168.1.4
    path: /data/nfs/spidybox/downloads/
    size: "200Gi"
  - name: medias-pv
    createPvc: medias-pvc
    type: nfs
    server: 192.168.1.4
    path: /data/nfs/medias/
    size: "2Ti"

# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}




seedbox:
  enabled: false
  name: seedbox
  description: "Seedbox applications for spidybox"
  activateDebugContainer: true

  serviceAccount:
    create: false

  initContainers: {}

  volumes:
    - name: "config"
      claimName: "spidybox-configs-pvc"
    - name: "downloads"
      claimName: "spidybox-downloads-pvc"

  secrets:
    - name: "vpn_config"
      value: "client.ovpn: dmFsdWUtMg0KDQo="
    - name: "vpn_auth"
      value: "auth.txt: dmFsdWUtMg0KDQo="

  containers:
    - name: "transmission"
      image:
        repository: "linuxserver/transmission"
        tag: "latest"
      resources:
        limits:
          cpu: "500m"
          memory: "500Mi"
      ports:
        - name: "transmission"
          number: 9091
          expose: true

    - name: openvpn
      image:
        repository: "dperson/openvpn-client"
        tag: "latest"
      resources:
        limits:
          cpu: "1000m"
          memory: "100Mi"
      stdin: true
      tty: true
      command:
        - "/bin/sh"
        - "-c"
      args:
        - "openvpn --config 'vpn/client.ovpn' --auth-user-pass 'vpn/auth.txt' --script-security 3"
      mounts:
        - from: seedbox-sec
          key: client.ovpn
          path: /vpn/client.ovpn
        - from: seedbox-sec
          key: auth.txt
          path: /vpn/auth.txt
      securityContext:
        privileged: true
        capabilities:
          add:
            - NET_ADMIN

frontend:
  enabled: true
  name: frontend
  description: "Frontend applications for spidybox"
  activateDebugContainer: false

  serviceAccount:
    create: false

  initContainers: {}

  volumes:
    - name: "config"
      claimName: "spidybox-configs-pvc"
      shared: false
    - name: "downloads"
      claimName: "spidybox-downloads-pvc"
      shared: true
    - name: "videos"
      claimName: "medias-pvc"
      subPath: "videos"
      shared: true

  containers:
    - name: "prowlarr"
      image:
        repository: "linuxserver/prowlarr"
        tag: "latest"
      resources:
        limits:
          cpu: "400m"
          memory: "600Mi"
      ports:
        - name: "prowlarr"
          number: 9696
          nodePort: 30096
          expose: true

    - name: "radarr"
      image:
        repository: "linuxserver/radarr"
        tag: "latest"
      resources:
        limits:
          cpu: "500m"
          memory: "600Mi"
      ports:
        - name: "radarr"
          number: 7878
          nodePort: 30078
          expose: true

    - name: "sonarr"
      image:
        repository: "linuxserver/sonarr"
        tag: "latest"
      resources:
        limits:
          cpu: "500m"
          memory: "600Mi"
      ports:
        - name: "sonarr"
          number: 8989
          nodePort: 30089
          expose: true

    - name: "lidarr"
      image:
        repository: "linuxserver/lidarr"
        tag: "latest"
      resources:
        limits:
          cpu: "500m"
          memory: "600Mi"
      ports:
        - name: "lidarr"
          number: 8686
          nodePort: 30086
          expose: true

    - name: "transmission"
      image:
        repository: "linuxserver/transmission"
        tag: "latest"
      resources:
        limits:
          cpu: "2000m"
          memory: "1000Mi"
      livenessProbe:
        httpGet:
          path: /transmission/web
          port: 9091
        initialDelaySeconds: 30
        periodSeconds: 60
        failureThreshold: 5
      readinessProbe:
        httpGet:
          path: /transmission/web
          port: 9091
        initialDelaySeconds: 30
        periodSeconds: 60
        failureThreshold: 5

      ports:
        - name: "transmission"
          number: 9091
          nodePort: 30091
          expose: true
